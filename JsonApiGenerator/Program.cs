// Decompiled with JetBrains decompiler
// Type: CrudGenerator.Program
// Assembly: CrudGenerator, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E809817-E715-4F80-AB0D-00A4517BB9C6
// Assembly location: C:\Users\e400092\source\repos\CrudGenerator\CrudGenerator\bin\Debug\net5.0\CrudGenerator.dll

using JsonApiGenerator;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;


#nullable enable
namespace CrudGenerator
{
    public static class Program
    {
        private const string AutogenWarning = "// This file was generated by a tool (CrudGenerator). Do not make changes here, because if you make changes here, and run the tool again, your changes will be blown away. Instead, make changes by extending this partial class.\r\n";
        private static string Namespace = Path.GetDirectoryName(Directory.GetCurrentDirectory()) ?? throw new Exception();

        public static void Main()
        {
            var schema = new Schema(new[]
            {
                new Resource("Parent",  new[]
                {
                  new Property("Name", PropertyType.String, false, true)
                }),
                new Resource("Child",  new[]
                {
                  new Property("Name", PropertyType.String, false, true),
                  new Property("Toy", PropertyType.String, false, false)
                }),
                new Resource("Teacher",  new[]
                {
                  new Property("Name", PropertyType.String, false, true)
                })
            }, new[]
            {
                new Relation("Parent", "Child", RelationType.OneToMany, DeleteBehavior.Restrict, false),
                new Relation("Child", "Teacher", RelationType.ManyToMany, DeleteBehavior.Restrict, false)
            });
            var directoryInfo = new DirectoryInfo(Path.Combine(Directory.GetCurrentDirectory(), Namespace));
            if (directoryInfo.Exists)
            {
                directoryInfo.Delete(true);
            }

            directoryInfo.Create();
            foreach (var resource in schema.Resources)
            {
                var code = ToCode(resource, schema);
                Directory.CreateDirectory(Path.Combine(directoryInfo.FullName, "Models"));
                File.WriteAllText(Path.Combine(directoryInfo.FullName, "Models", resource.Name + ".cs"), code);
                var controller = CreateController(resource);
                Directory.CreateDirectory(Path.Combine(directoryInfo.FullName, "Controllers"));
                File.WriteAllText(Path.Combine(directoryInfo.FullName, "Controllers", resource.Name + "Controller.cs"), controller);
            }
            foreach (var relation in schema.Relations)
            {
                var relationIfManyToMany = CreateRelationIfManyToMany(relation);
                if (relationIfManyToMany != null)
                {
                    Directory.CreateDirectory(Path.Combine(directoryInfo.FullName, "ManyToMany"));
                    File.WriteAllText(Path.Combine(directoryInfo.FullName, "ManyToMany", relation.Resource1Name + relation.Resource2Name + ".cs"), relationIfManyToMany);
                }
            }
            var dbContext = CreateDbContext(schema);
            Directory.CreateDirectory(Path.Combine(directoryInfo.FullName, "Data"));
            File.WriteAllText(Path.Combine(directoryInfo.FullName, "Data", "AppContext.cs"), dbContext);
            var uniqueConstraints = CreateUniqueConstraints(schema.Resources);
            if (uniqueConstraints == null)
            {
                return;
            }

            File.WriteAllText(Path.Combine(directoryInfo.FullName, "Data", "UniqueConstraints.cs"), uniqueConstraints);
        }

        private static string CreateController(Resource resource) =>
            new StringBuilder(AutogenWarning)
                .Append("using ")
                .Append(Namespace)
                .Append(".Models;\r\nusing Microsoft.Extensions.Logging;\r\nusing JsonApiDotNetCore.Configuration;\r\nusing JsonApiDotNetCore.Controllers;\r\nusing JsonApiDotNetCore.Services;\r\n\r\nnamespace ")
                .Append(Namespace)
                .Append(".Controllers\r\n{\r\n    public partial class ")
                .Append(resource.Name)
                .Append("Controller : JsonApiController<")
                .Append(resource.Name)
                .Append('>')
                .AppendLine()
                .Append("    {\r\n        public ")
                .Append(resource.Name)
                .AppendLine("Controller(")
                .Append("                IJsonApiOptions jsonApiOptions,\r\n                IResourceService<")
                .Append(resource.Name)
                .Append("> resourceService,\r\n                ILoggerFactory loggerFactory)\r\n            : base(jsonApiOptions, loggerFactory, resourceService)\r\n        { }\r\n    }\r\n}\r\n")
                .ToString();

        private static string? CreateRelationIfManyToMany(Relation relation) =>
            relation.RelationType != RelationType.ManyToMany
                ? null
                : new StringBuilder(AutogenWarning)
                    .Append("namespace ")
                    .Append(Namespace)
                    .Append(".ManyToMany\r\n{\r\n    public partial class ")
                    .Append(relation.Resource1Name)
                    .AppendLine(relation.Resource2Name)
                    .AppendLine("    {")
                    .Append("        public virtual ")
                    .Append(relation.Resource1Name)
                    .Append(' ')
                    .Append(relation.Resource1Name)
                    .AppendLine(" { get; set; } = null!;")
                    .Append("        public int ")
                    .Append(relation.Resource1Name)
                    .Append("Id { get; set; }\r\n\r\n")
                    .Append("        public virtual ")
                    .Append(relation.Resource2Name)
                    .Append(' ')
                    .Append(relation.Resource2Name)
                    .AppendLine(" { get; set; } = null!;")
                    .Append("        public int ")
                    .Append(relation.Resource2Name)
                    .Append("Id { get; set; }\r\n    }\r\n}\r\n")
                    .ToString();

        private static string? CreateUniqueConstraints(IReadOnlyList<Resource> resources)
        {
            var flag = false;
            var stringBuilder = new StringBuilder(AutogenWarning)
                .Append("namespace ")
                .Append(Namespace)
                .Append(".Data\r\n{\r\n    /// <summary>\r\n    /// These are the names of the database's unique constraints. If the constraint is violated during a save, the SQL exception will contain the name. Values can be changed, but you'll need a new migration for it to take effect.\r\n    /// </summary>\r\n    public static partial class UniqueConstraints\r\n    {\r\n");
            foreach (var resource in resources)
            {
                foreach (var property in resource.Properties)
                {
                    if (property.Unique)
                    {
                        flag = true;
                        stringBuilder.Append("        public const string ")
                            .Append(resource.Name)
                            .Append(property.Name)
                            .Append(" = \"IX_")
                            .Append(resource.Name)
                            .Append('_')
                            .Append(property.Name)
                            .AppendLine("\";");
                    }
                }
            }
            if (!flag)
            {
                return null;
            }

            return stringBuilder.Append("    }\r\n}\r\n")
                .ToString();
        }

        private static string CreateDbContext(Schema schema)
        {
            var stringBuilder = new StringBuilder(AutogenWarning)
                .Append("using Microsoft.EntityFrameworkCore;\r\nusing")
                .Append(Namespace)
                .Append(";\r\n\r\nnamespace ")
                .Append(Namespace)
                .Append(".Data\r\n{\r\n    public partial class AppContext : DbContext\r\n    {");
            var list1 = schema.Resources
                .OrderBy(r => r.Name)
                .ToList();
            foreach (var resource in list1)
            {
                stringBuilder.Append(' ', 8)
                    .Append("public DbSet<")
                    .Append(resource.Name)
                    .Append("> ")
                    .Append(resource.Name)
                    .Append('s')
                    .Append(" { get; set; } = null!;\r\n");
            }

            stringBuilder.AppendLine("\r\n        protected override void OnConfiguring(DbContextOptionsBuilder dbContextOptionsBuilder) => dbContextOptionsBuilder\r\n            .UseLazyLoadingProxies();\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n        {\r\n            ConfigureModels(modelBuilder);");
            var list2 = schema.Relations
                .Where(r => r.RelationType == RelationType.ManyToMany)
                .OrderBy(r => r.Resource1Name)
                .ThenBy(r => r.Resource2Name)
                .ToList();
            if (list2.Any())
            {
                stringBuilder.AppendLine("            ConfigureManyToManys(modelBuilder);");
            }

            stringBuilder.AppendLine("        }\r\n\r\n        private static void ConfigureModels(ModelBuilder modelBuilder)\r\n        {\r\n            // Some organization conventions:\r\n            // 1. Entities are sorted alphabetically, to ease finding.\r\n            // 2. Only HasOne(...).WithMany(...) sides of one-to-many relationships are configured. Configuring the HasMany(...).WithOne(...) side of the conjugate entity too doesn't hurt anything, but is pointless, and also risks accidentally configuring two different behaviors for the same relationship (IIRC EF Core does not error telling you something is wrong, but instead arbitrarily picks whichever was configured last).\r\n");
            for (var index = 0; index < list1.Count; ++index)
            {
                var resource = list1[index];
                var list3 = schema.Relations
                    .Where(r => r.RelationType == RelationType.OneToMany && r.Resource2Name == resource.Name)
                    .OrderBy(r => r.Resource1Name)
                    .ToList();
                var source = resource.Properties
                    .Where(p => p.Unique)
                    .OrderBy(p => p.Name);
                if (list3.Any() || source.Any())
                {
                    stringBuilder.Append("            modelBuilder.Entity<")
                        .Append(resource.Name)
                        .Append(">(x =>\r\n            {\r\n");
                    foreach (var property in source)
                    {
                        stringBuilder.Append("                x.HasIndex(p => p.")
                            .Append(property.Name)
                            .Append(')')
                            .AppendLine()
                            .Append("                    .HasDatabaseName(UniqueConstraints.")
                            .Append(resource.Name)
                            .Append(property.Name)
                            .AppendLine(")\r\n                    .IsUnique();");
                    }

                    foreach (var relation in list3)
                    {
                        stringBuilder.Append("                x.HasOne(p => p.")
                            .Append(relation.Resource1Name)
                            .Append(')')
                            .AppendLine()
                            .Append("                    .WithMany(p => p.")
                            .Append(relation.Resource2Name)
                            .AppendLine("s)")
                            .Append("                    .OnDelete(DeleteBehavior.")
                            .Append(relation.DeleteBehavior.ToString())
                            .Append(");\r\n");
                    }

                    stringBuilder.AppendLine("            });");
                    if (index != list1.Count - 1)
                    {
                        stringBuilder.AppendLine();
                    }
                }
            }
            stringBuilder.AppendLine("        }");
            if (list2.Any())
            {
                stringBuilder.AppendLine().Append("        private static void ConfigureManyToManys(ModelBuilder modelBuilder)\r\n        {\r\n");
                foreach (var relation in list2)
                {
                    stringBuilder.Append("            modelBuilder.Entity<")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append(">(x =>\r\n            {\r\n                x.HasKey(m => new { m.")
                        .Append(relation.Resource1Name)
                        .Append("Id, m.")
                        .Append(relation.Resource2Name)
                        .AppendLine(" });")
                        .Append("                x.HasOne(m => m.")
                        .Append(relation.Resource1Name)
                        .Append(')')
                        .AppendLine()
                        .Append("                    .WithMany(p => p.")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append('s')
                        .Append(')')
                        .AppendLine()
                        .Append("                    .HasForeignKey(m => m.")
                        .Append(relation.Resource1Name)
                        .AppendLine("Id);")
                        .Append("                x.HasOne(m => m.")
                        .Append(relation.Resource2Name)
                        .Append(')')
                        .AppendLine()
                        .Append("                    .WithMany(p => p.")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append('s').Append(')')
                        .AppendLine()
                        .Append("                    .HasForeignKey(m => m.")
                        .Append(relation.Resource2Name)
                        .AppendLine("Id);")
                        .AppendLine("            });");
                }

                stringBuilder.AppendLine("        }");
            }
            return stringBuilder.Append("    }\r\n}\r\n")
                .ToString();
        }

        private static string ToCode(Resource resource, Schema schema)
        {
            var list1 = schema.Relations
                .Where(r => r.RelationType == RelationType.OneToMany && r.Resource1Name == resource.Name)
                .OrderBy(r => r.Resource2Name)
                .ToList();
            var list2 = schema.Relations
                .Where(r => r.RelationType == RelationType.OneToMany && r.Resource2Name == resource.Name)
                .OrderBy(r => r.Resource1Name)
                .ToList();
            var list3 = schema.Relations
                .Where(r => r.RelationType == RelationType.ManyToMany && r.Resource1Name == resource.Name)
                .OrderBy(r => r.Resource2Name)
                .ToList();
            var list4 = schema.Relations
                .Where(r => r.RelationType == RelationType.ManyToMany && r.Resource2Name == resource.Name)
                .OrderBy(r => r.Resource1Name)
                .ToList();
            var stringBuilder = new StringBuilder(AutogenWarning);
            if (resource.Properties.Any(p => p.PropertyType == PropertyType.Guid))
            {
                stringBuilder.AppendLine("using System;");
            }

            if (list1.Any() || list3.Any() || list4.Any())
            {
                stringBuilder.AppendLine("using System.Collections.Generic;");
            }

            if (list3.Any() || list4.Any())
            {
                stringBuilder.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
            }

            stringBuilder.Append("using JsonApiDotNetCore.Resources;\r\nusing JsonApiDotNetCore.Resources.Annotations;\r\n\r\nnamespace ")
                .Append(Namespace)
                .Append(".Models\r\n{\r\n    public partial class ")
                .Append(resource.Name)
                .AppendLine(" : Identifiable")
                .Append(' ', 4)
                .Append('{');
            foreach (var property in resource.Properties)
            {
                Render(stringBuilder, property);
            }

            if (list1.Any())
            {
                stringBuilder.AppendLine()
                    .AppendLine("        // Relationships: One-to-many")
                    .AppendLine();
                foreach (var relation in list1)
                {
                    stringBuilder.Append("        [HasMany]\r\n        public virtual List<")
                        .Append(relation.Resource2Name)
                        .Append("> ")
                        .Append(relation.Resource2Name)
                        .AppendLine("s { get; set; } = null!;");
                }
            }
            if (list2.Any())
            {
                stringBuilder.AppendLine()
                    .AppendLine("        // Relationships: Many-to-one")
                    .AppendLine();
                foreach (var relation in list2)
                {
                    stringBuilder.AppendLine("        [HasOne]")
                        .Append("        public virtual ")
                        .Append(relation.Resource1Name);
                    if (relation.Optional)
                    {
                        stringBuilder.Append('?');
                    }

                    stringBuilder.Append(' ')
                        .Append(relation.Resource1Name)
                        .Append(" { get; set; }");
                    if (!relation.Optional)
                    {
                        stringBuilder.Append(" = null!;");
                    }

                    stringBuilder.AppendLine()
                        .AppendLine("        [Attr]")
                        .Append("        public int");
                    if (relation.Optional)
                    {
                        stringBuilder.Append('?');
                    }

                    stringBuilder.Append(' ')
                        .Append(relation.Resource1Name)
                        .AppendLine("Id { get; set; }");
                }
            }
            if (list3.Any() || list4.Any())
            {
                stringBuilder.AppendLine()
                    .AppendLine("        // Relationships: Many-to-many")
                    .AppendLine();
                foreach (var relation in list3)
                {
                    stringBuilder.Append("        [NotMapped]\r\n        [HasManyThrough(nameof(")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append("s))]\r\n        public List<")
                        .Append(relation.Resource2Name)
                        .Append("> ")
                        .Append(relation.Resource2Name)
                        .Append("s { get; set; } = null!;\r\n        public virtual List<")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append("> ")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .AppendLine("s { get; set; } = null!;")
                        .AppendLine();
                }

                foreach (var relation in list4)
                {
                    stringBuilder.Append("        [NotMapped]\r\n        [HasManyThrough(nameof(")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append("s))]\r\n        public List<")
                        .Append(relation.Resource1Name)
                        .Append("> ")
                        .Append(relation.Resource1Name)
                        .Append("s { get; set; } = null!;\r\n        public virtual List<")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .Append("> ")
                        .Append(relation.Resource1Name)
                        .Append(relation.Resource2Name)
                        .AppendLine("s { get; set; } = null!;")
                        .AppendLine();
                }
            }
            stringBuilder.Append("    }\r\n}\r\n");
            return stringBuilder.ToString();
        }

        private static void Render(StringBuilder stringBuilder, Property property)
        {
            stringBuilder.Append("\r\n        [Attr]\r\n        public ")
                .Append(ToCode(property.PropertyType));
            if (property.Optional)
            {
                stringBuilder.Append('?');
            }

            stringBuilder.Append(' ')
                .Append(property.Name)
                .Append(" { get; set; }");
            if (!property.Optional && property.PropertyType == PropertyType.String)
            {
                stringBuilder.Append(" = null!;");
            }

            stringBuilder.AppendLine();
        }

        private static string ToCode(PropertyType propertyType) => propertyType switch
        {
            PropertyType.String => "string",
            PropertyType.Int => "int",
            PropertyType.Double => "double",
            PropertyType.Guid => "Guid",
            PropertyType.Bool => "bool",
            _ => throw new ArgumentOutOfRangeException(nameof(propertyType), propertyType, "Unknown value"),
        };
    }
}
